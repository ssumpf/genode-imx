proc wifi_ssid { } {
	return $::env(GENODE_WIFI_SSID)
}

proc wifi_psk { } {
	return $::env(GENODE_WIFI_PSK)
}


proc wifi_wpa { } {
	if {![info exists ::env(GENODE_WIFI_WPA)]} {
		return WPA2
	}
	return $::env(GENODE_WIFI_WPA)
}


create_boot_directory
import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/src/init \
                  [depot_user]/src/libc \
                  [depot_user]/src/openssl \
                  [depot_user]/src/vfs \
                  [depot_user]/raw/[board]-devices \
                  [depot_user]/pkg/imx8mp_qcacld2_wifi

build {
	driver/platform/imx8mp
	driver/pin/imx

	driver/wifi
	lib/imx8mp_qcacld2_wifi
	lib/vfs_jitterentropy

	driver/rtc/dummy
	server/dynamic_rom
	server/nic_router
	server/report_rom
	lib/vfs_lwip
	test/lwip/http_srv
}

#
# wifi config generator (supporting a network list)
#
# You may script your tests with this function in the dynamic_rom config below.
# The syntax for the networks parameter is
#
#   { ssid protection passphrase explicit_scan }
#
# Example dynamic_rom config:
#
#   {<inline description="auto-connect both networks">
#   } [wifi_config 30 5 no [list "net1 WPA2 net1_psk no" "net2 WPA2 net2_psk no"]] {
#   </inline>
#   <inline description="aquto-connect both, but net2 explicitly">
#   } [wifi_config 30 5 no [list "net1 WPA2 net1_psk no" "net2 WPA2 net2_psk yes"]] {
#   </inline>}

set wifi_verbose false

proc wifi_config { scan_interval rfkill networks } {
	global wifi_verbose
	global wifi_verbose_state

	set    config "<wifi_config"
	append config " verbose=\"$wifi_verbose\""
	append config " scan_interval=\"$scan_interval\""
	append config " rfkill=\"$rfkill\""
	append config ">\n"
	foreach n $networks {
		append config "  <network"
		append config " ssid=\"[lindex $n 0]\""
		append config " protection=\"[lindex $n 1]\""
		append config " passphrase=\"[lindex $n 2]\""
		append config " auto_connect=\"[lindex $n 3]\""
		append config " explicit_scan=\"[lindex $n 4]\""
		append config "/>\n"
	}
	append config "</wifi_config>\n"

	return $config
}

install_config {
	<config prio_levels="2">
		<parent-provides>
			<service name="LOG"/>
			<service name="PD"/>
			<service name="CPU"/>
			<service name="ROM"/>
			<service name="IO_MEM"/>
			<service name="IRQ"/>
		</parent-provides>

		<default caps="100"/>

		<start name="timer">
			<resource name="RAM" quantum="1M"/>
			<route> <any-service> <parent/> </any-service> </route>
			<provides> <service name="Timer"/> </provides>
		</start>

		<start name="system_report_rom">
			<binary name="report_rom"/>
			<resource name="RAM" quantum="2M"/>
			<provides> <service name="Report"/> <service name="ROM"/> </provides>
			<config verbose="no">
				<default-policy report="dummy-report"/>
			</config>
			<route>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Rtc"> <any-child/> </service>
			</route>
		</start>

		<start name="platform" caps="150" managing_system="yes">
			<binary name="imx8mp_platform"/>
			<resource name="RAM" quantum="2M"/>
			<provides> <service name="Platform"/> </provides>
			<config>
				<policy label="imx_pio -> ">
					<device name="gpio2"/>
				</policy>

				<policy label="wifi -> " info="yes">
					<device name="usdhc2"/>
				</policy>
			</config>
			<route>
				<service name="ROM" label="system"> <child name="system_report_rom"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="imx_pio">
			<resource name="RAM" quantum="1M"/>
			<provides>
				<service name="Pin_state"/>
				<service name="Pin_control"/>
				<service name="IRQ"/>
			</provides>
			<config>
				<out name="wlan_vmmc" index="19" bank="0" default="on"/>
			</config>
			<route>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Platform"> <child name="platform"/> </service>
			</route>
		</start>

		<start name="test-lwip_httpsrv">
			<resource name="RAM" quantum="128M"/>
			<config>
				<libc stdout="/dev/null" stderr="/dev/log" socket="/socket"/>
				<vfs>
					<dir name="dev"> <log/> <null/> </dir>
					<dir name="socket"> <lwip dhcp="yes"/> </dir>
				</vfs>
			</config>
			<route>
				<service name="Nic"> <child name="nic_router"/> </service>
				<any-service> <parent/> <any-child/> </any-service>
			</route>
		</start>

		<start name="nic_router" caps="150">
			<resource name="RAM" quantum="8M"/>
			<provides>
				<service name="Nic"/>
				<service name="Uplink"/>
			</provides>
			<config verbose="no" verbose_domain_state="yes" dhcp_discover_timeout_sec="10" dhcp_request_timeout_sec="6">

				<policy label_prefix="test-lwip_httpsrv" domain="downlink"/>
				<policy label_prefix="wifi"              domain="uplink"/>

				<domain name="uplink" verbose_packets="no" verbose_packet_drop="no" icmp_echo_server="yes">

					<nat domain="downlink" tcp-ports="16384"/>
					<tcp-forward port="443" domain="downlink" to="10.0.3.2"/>
					<tcp-forward port="80"  domain="downlink" to="10.0.3.2"/>

				</domain>

				<domain name="downlink" verbose_packets="no" verbose_packet_drop="no" interface="10.0.3.1/24">

					<dhcp-server ip_first="10.0.3.2" ip_last="10.0.3.2"/>

				</domain>

			</config>
			<route>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Timer">    <child name="timer"/> </service>
			</route>
		</start>

		<start name="dummy_rtc">
			<resource name="RAM" quantum="1M"/>
			<provides> <service name="Rtc"/> </provides>
			<config year="2023" month="02" day="27" hour="12" minute="0" second="0"/>
			<route>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="state_report_rom">
			<binary name="report_rom"/>
			<resource name="RAM" quantum="2M"/>
			<provides> <service name="Report"/> <service name="ROM"/> </provides>
			<config verbose="no"/>
			<route>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Rtc"> <any-child/> </service>
			</route>
		</start>

		<start name="accesspoints_report_rom">
			<binary name="report_rom"/>
			<resource name="RAM" quantum="2M"/>
			<provides> <service name="Report"/> <service name="ROM"/> </provides>
			<config verbose="no"/>
			<route>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Rtc"> <any-child/> </service>
			</route>
		</start>

		<start name="devices_report_rom">
			<binary name="report_rom"/>
			<resource name="RAM" quantum="2M"/>
			<provides> <service name="Report"/> <service name="ROM"/> </provides>
			<config verbose="yes"/>
			<route>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Rtc"> <any-child/> </service>
			</route>
		</start>

		<start name="config_rom">
			<binary name="dynamic_rom"/>
			<resource name="RAM" quantum="4M"/>
			<provides><service name="ROM"/></provides>
			<config verbose="yes">
				<rom name="wifi_config">
					<inline description="disconnect">
	} [wifi_config 15 no {}] {
					</inline>
					<sleep milliseconds="15000"/>
					<inline description="connect">
	} [wifi_config 15 no [list "[wifi_ssid] [wifi_wpa] [wifi_psk] yes no"]] {
					</inline>
					<sleep milliseconds="120000"/>
				</rom>
			</config>
			<route>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Rtc"> <any-child/> </service>
				<service name="Timer"> <child name="timer"/> </service>
			</route>
		</start>

		<start name="wifi" caps="250" priority="-1">
			<resource name="RAM" quantum="32M"/>
			<config ld_verbose="yes">
				<report mac_address="true"/>
				<libc stdout="/dev/log" stderr="/dev/null" rtc="/dev/rtc" rng="/dev/urandom"/>
				<vfs>
					<dir name="dev"> <log/> <null/> <rtc/>
						<jitterentropy name="random"/>
						<jitterentropy name="urandom"/>
					</dir>
					<dir name="firmware">
						<tar name="wifi_firmware.tar"/>
					</dir>
				</vfs>
			</config>
			<route>
				<service name="Uplink"> <child name="nic_router"/> </service>
				<service name="ROM" label="wifi.lib.so">
					<parent label="imx8mp_qcacld2_wifi.lib.so"/> </service>
				<service name="ROM" label="wifi_firmware.tar">
					<parent label="imx8mp_qcacld2_wifi_firmware.tar"/> </service>
				<service name="ROM" label="dtb">
					<parent label="wifi-} [board] {.dtb"/> </service>
				<service name="Report" label="accesspoints">
					<child name="accesspoints_report_rom"/> </service>
				<service name="Report" label="state">
					<child name="state_report_rom"/> </service>
				<service name="Report" label="devices">
					<child name="devices_report_rom"/> </service>
				<service name="ROM" label="wifi_config">
					<child name="config_rom"/> </service>
				<service name="ROM"> <parent/> </service>
				<service name="CPU"> <parent/> </service>
				<service name="PD">  <parent/> </service>
				<service name="LOG"> <parent/> </service>
				<service name="Rtc"> <any-child/> </service>
				<service name="Timer">    <child name="timer"/> </service>
				<service name="Platform"> <child name="platform"/> </service>
			</route>
		</start>

	</config>
}

build_boot_image [list {*}[build_artifacts] wifi-mnt_pocket.dtb]

run_genode_until forever

# vi: set ft=tcl :
