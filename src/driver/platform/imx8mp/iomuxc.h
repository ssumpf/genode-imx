/*
 * \brief  IOMUX controller for i.MX8MP
 * \author Stefan Kalkowski
 * \date   2024-06-08
 */

/*
 * Copyright (C) 2024 Genode Labs GmbH
 *
 * This file is part of the Genode OS framework, which is distributed
 * under the terms of the GNU Affero General Public License version 3.
 */

#ifndef __PLATFORM__IMX__IOMUXC_H_
#define __PLATFORM__IMX__IOMUXC_H_

#include <os/attached_mmio.h>

namespace Driver {
	using namespace Genode;

	struct Iomuxc;
};


/* The following values are taken from device-tree sources of the
 * vendor from their Linux kernel forks, therefore they have this
 * specific form of arrays:
 */
enum Indices {
	MUX_REG, CONF_REG, INPUT_REG, MUX_MODE, INPUT_VAL, CONF_VAL, MAX };

static Genode::uint32_t pinctrl_setting [][MAX] {
	/* pinctrl_usdhc2 */
	{ 0x0C0, 0x320, 0x000, 0x0, 0x0, 0x190 },
	{ 0x0C4, 0x324, 0x000, 0x0, 0x0, 0x1d0 },
	{ 0x0C8, 0x328, 0x000, 0x0, 0x0, 0x1d0 },
	{ 0x0CC, 0x32C, 0x000, 0x0, 0x0, 0x1d0 },
	{ 0x0D0, 0x330, 0x000, 0x0, 0x0, 0x1d0 },
	{ 0x0D4, 0x334, 0x000, 0x0, 0x0, 0x1d0 },

	/* pinctrl_reg_wlan_vmmc */
	{ 0x0D8, 0x338, 0x000, 0x5, 0x0, 0x16, },

	/* pinctrl_usdhc3_200mhz */
	{ 0x124, 0x384, 0x604, 0x2, 0x1, 0x196 },
	{ 0x128, 0x388, 0x60C, 0x2, 0x1, 0x1d6 },
	{ 0x108, 0x368, 0x610, 0x2, 0x1, 0x1d6 },
	{ 0x10C, 0x36C, 0x614, 0x2, 0x1, 0x1d6 },
	{ 0x110, 0x370, 0x618, 0x2, 0x1, 0x1d6 },
	{ 0x114, 0x374, 0x61C, 0x2, 0x1, 0x1d6 },
	{ 0x11C, 0x37C, 0x620, 0x2, 0x1, 0x1d6 },
	{ 0x0EC, 0x34C, 0x624, 0x2, 0x1, 0x1d6 },
	{ 0x0F0, 0x350, 0x628, 0x2, 0x1, 0x1d6 },
	{ 0x0F4, 0x354, 0x62C, 0x2, 0x1, 0x1d6 },
	{ 0x0E8, 0x348, 0x630, 0x2, 0x1, 0x12  },

	/* pinctrl_eqos */
	{ 0x054, 0x2B4, 0x000, 0x0, 0x0, 0x20  },
	{ 0x058, 0x2B8, 0x590, 0x0, 0x1, 0xa0  },
	{ 0x06C, 0x2CC, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x070, 0x2D0, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x068, 0x2C8, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x064, 0x2C4, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x060, 0x2C0, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x05C, 0x2BC, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x074, 0x2D4, 0x000, 0x0, 0x0, 0x91  },
	{ 0x078, 0x2D8, 0x000, 0x0, 0x0, 0x91  },
	{ 0x07C, 0x2DC, 0x000, 0x0, 0x0, 0x91  },
	{ 0x080, 0x2E0, 0x000, 0x0, 0x0, 0x91  },
	{ 0x084, 0x2E4, 0x000, 0x0, 0x0, 0x91  },
	{ 0x088, 0x2E8, 0x000, 0x0, 0x0, 0x91  },
	{ 0x120, 0x380, 0x000, 0x5, 0x0, 0x100 },
	{ 0x118, 0x378, 0x000, 0x5, 0x0, 0x10  },

	/* pinctrl_usb1_vbus */
	{ 0x04C, 0x2AC, 0x000, 0x1, 0x0, 0x10 },

	/* pinctrl_i2c1 */
	{ 0x200, 0x460, 0x5A4, 0x0, 0x2, 0x400001c3 },
	{ 0x204, 0x464, 0x5A8, 0x0, 0x2, 0x400001c3 },

	/* pinctrl_i2c1_1 */
	{ 0x200, 0x460, 0x000, 0x5, 0x0, 0x1c3 },
	{ 0x204, 0x464, 0x000, 0x5, 0x0, 0x1c3 },

	/* pinctrl_i2c2 */
	{ 0x208, 0x468, 0x5AC, 0x0, 0x2, 0x400001c3 },
	{ 0x20C, 0x46C, 0x5B0, 0x0, 0x2, 0x400001c3 },

	/* pinctrl_i2c2_1 */
	{ 0x208, 0x468, 0x000, 0x5, 0x0, 0x1c3 },
	{ 0x20C, 0x46C, 0x000, 0x5, 0x0, 0x1c3 },

	/* pinctrl_wdog */
	{ 0x01c, 0x27c, 0x000, 0x1, 0x0, 0xc6 },

	/* pinctrl_panel */
	{ 0x02C, 0x28C, 0x000, 0x0, 0x0, 0x140 },
	{ 0x030, 0x290, 0x000, 0x0, 0x0, 0x140 },
	{ 0x0A4, 0x304, 0x000, 0x5, 0x0, 0x41  },

	/* pinctrl_edp_bridge */
	{ 0x024, 0x284, 0x000, 0x0, 0x0, 0x100 },
};


struct Driver::Iomuxc : Genode::Attached_mmio<0x10000>
{
	enum {
		PINCTRL_MMIO_BASE = 0x30330000,
		PINCTRL_MMIO_SIZE = 0x10000,
	};

	struct Mux : Mmio<32>
	{
		struct Reg : Register<0, 32>
		{
			struct Mode : Bitfield<0,3> {};
		};

		Mux(Byte_range_ptr const &range, Reg::access_t mux_mode)
		:
			Mmio<SIZE>(range)
		{
			write<Reg::Mode>(mux_mode);
		}
	};

	struct Misc : Mmio<32>
	{
		struct Reg : Register<0, 32> { };

		Misc(Byte_range_ptr const &range, Reg::access_t val)
		:
			Mmio<SIZE>(range)
		{
			write<Reg>(val);
		}
	};

	Iomuxc(Env &env)
	:
		Attached_mmio<SIZE>(env, { (char*)PINCTRL_MMIO_BASE, SIZE })
	{
		unsigned count = sizeof(pinctrl_setting) / (MAX*sizeof(uint32_t));
		for (unsigned i = 0; i < count; i++) {
			Mux mux(range_at(pinctrl_setting[i][MUX_REG]),
			        pinctrl_setting[i][MUX_MODE]);
			Misc conf(range_at(pinctrl_setting[i][CONF_REG]),
			        pinctrl_setting[i][CONF_VAL]);

			/* set input register only if it is set != 0 */
			if (pinctrl_setting[i][INPUT_REG])
				Misc input(range_at(pinctrl_setting[i][INPUT_REG]),
				           pinctrl_setting[i][INPUT_VAL]);
		}
	}
};

#endif /* __PLATFORM__IMX__IOMUXC_H_ */
