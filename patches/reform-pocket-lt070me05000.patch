diff --git a/linux/patches6.6/imx8mp-mnt-pocket-reform/pocket-panel/0001-panel-jdi-lt070me05000-pocket-reform.patch b/linux/patches6.6/imx8mp-mnt-pocket-reform/pocket-panel/0001-panel-jdi-lt070me05000-pocket-reform.patch
index 78445d3..5ca6a6f 100644
--- a/linux/patches6.6/imx8mp-mnt-pocket-reform/pocket-panel/0001-panel-jdi-lt070me05000-pocket-reform.patch
+++ b/linux/patches6.6/imx8mp-mnt-pocket-reform/pocket-panel/0001-panel-jdi-lt070me05000-pocket-reform.patch
@@ -99,10 +99,7 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  	}
  
 -	mdelay(20);
-+	// interface ID setting
-+	ret = mipi_dsi_generic_write(dsi, (u8[])
-+						 {0xb4, 0x0c}, 2);
- 
+-
 -	ret = mipi_dsi_generic_write(dsi, (u8[]){0xB0, 0x03}, 2);
 -	if (ret < 0) {
 -		dev_err(dev, "failed to set default values for mcap: %d\n"
@@ -118,7 +115,10 @@ index 8f4f137a2af6..edf6bd4a6611 100644
 -	struct mipi_dsi_device *dsi = jdi->dsi;
 -	struct device *dev = &jdi->dsi->dev;
 -	int ret;
--
++	// interface ID setting
++	ret = mipi_dsi_generic_write(dsi, (u8[])
++						 {0xb4, 0x0c}, 2);
+ 
 -	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
 +	// DSI control
 +	ret = mipi_dsi_generic_write(dsi, (u8[])
@@ -127,7 +127,7 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  	ret = mipi_dsi_dcs_set_display_on(dsi);
 -	if (ret < 0)
 -		dev_err(dev, "failed to set display on: %d\n", ret);
- 
+-
 -	return ret;
 -}
 -
@@ -142,7 +142,7 @@ index 8f4f137a2af6..edf6bd4a6611 100644
 -	ret = mipi_dsi_dcs_set_display_off(dsi);
 -	if (ret < 0)
 -		dev_err(dev, "failed to set display off: %d\n", ret);
--
+ 
 -	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
 -	if (ret < 0)
 -		dev_err(dev, "failed to enter sleep mode: %d\n", ret);
@@ -152,7 +152,7 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  }
  
  static int jdi_panel_disable(struct drm_panel *panel)
-@@ -199,8 +139,6 @@ static int jdi_panel_unprepare(struct drm_panel *panel)
+@@ -199,17 +139,15 @@ static int jdi_panel_unprepare(struct drm_panel *panel)
  	if (!jdi->prepared)
  		return 0;
  
@@ -161,7 +161,29 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  	ret = regulator_bulk_disable(ARRAY_SIZE(jdi->supplies), jdi->supplies);
  	if (ret < 0)
  		dev_err(dev, "regulator disable failed, %d\n", ret);
-@@ -242,44 +180,29 @@ static int jdi_panel_prepare(struct drm_panel *panel)
+ 
+ 	gpiod_set_value(jdi->enable_gpio, 0);
+ 
+-	gpiod_set_value(jdi->reset_gpio, 1);
++	if (!IS_ERR(jdi->reset_gpio)) gpiod_set_value(jdi->reset_gpio, 1);
+ 
+-	gpiod_set_value(jdi->dcdc_en_gpio, 0);
++	if (!IS_ERR(jdi->dcdc_en_gpio)) gpiod_set_value(jdi->dcdc_en_gpio, 0);
+ 
+ 	jdi->prepared = false;
+ 
+@@ -233,53 +171,38 @@ static int jdi_panel_prepare(struct drm_panel *panel)
+ 
+ 	msleep(20);
+ 
+-	gpiod_set_value(jdi->dcdc_en_gpio, 1);
++	if (!IS_ERR(jdi->dcdc_en_gpio)) gpiod_set_value(jdi->dcdc_en_gpio, 1);
+ 	usleep_range(10, 20);
+ 
+-	gpiod_set_value(jdi->reset_gpio, 0);
++	if (!IS_ERR(jdi->reset_gpio)) gpiod_set_value(jdi->reset_gpio, 0);
+ 	usleep_range(10, 20);
+ 
  	gpiod_set_value(jdi->enable_gpio, 1);
  	usleep_range(10, 20);
  
@@ -235,7 +257,23 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  {
  	struct drm_display_mode *mode;
  	struct jdi_panel *jdi = to_jdi_panel(panel);
-@@ -330,27 +253,19 @@ static int dsi_dcs_bl_get_brightness(struct backlight_device *bl)
+@@ -314,6 +237,15 @@ static int jdi_panel_get_modes(struct drm_panel *panel,
+ 		return -ENOMEM;
+ 	}
+ 
++	// on A311D, we shift the vsync by one line to counteract VIU_OSD_HOLD_FIFO_LINES
++	if (of_property_present(dev->of_node, "vsync-shift")) {
++		uint32_t vsync_shift = 0;
++		of_property_read_u32(dev->of_node, "vsync-shift", &vsync_shift);
++		dev_warn(dev, "vsync-shift from device tree: %d\n", vsync_shift);
++		mode->vsync_start += vsync_shift;
++		mode->vsync_end += vsync_shift;
++	}
++
+ 	drm_mode_set_name(mode);
+ 
+ 	drm_mode_probed_add(connector, mode);
+@@ -330,27 +262,19 @@ static int dsi_dcs_bl_get_brightness(struct backlight_device *bl)
  	int ret;
  	u16 brightness = bl->props.brightness;
  
@@ -267,7 +305,7 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  
  	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
  
-@@ -363,9 +278,9 @@ static const struct backlight_ops dsi_bl_ops = {
+@@ -363,9 +287,9 @@ static const struct backlight_ops dsi_bl_ops = {
  };
  
  static struct backlight_device *
@@ -279,7 +317,7 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  	struct backlight_properties props;
  
  	memset(&props, 0, sizeof(props));
-@@ -373,8 +288,8 @@ drm_panel_create_dsi_backlight(struct mipi_dsi_device *dsi)
+@@ -373,8 +297,8 @@ drm_panel_create_dsi_backlight(struct mipi_dsi_device *dsi)
  	props.brightness = 255;
  	props.max_brightness = 255;
  
@@ -290,8 +328,18 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  }
  
  static const struct drm_panel_funcs jdi_panel_funcs = {
-@@ -430,7 +345,7 @@ static int jdi_panel_add(struct jdi_panel *jdi)
- 		return dev_err_probe(dev, PTR_ERR(jdi->dcdc_en_gpio),
+@@ -416,15 +340,15 @@ static int jdi_panel_add(struct jdi_panel *jdi)
+ 
+ 	jdi->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+ 	if (IS_ERR(jdi->reset_gpio))
+-		return dev_err_probe(dev, PTR_ERR(jdi->reset_gpio),
++		dev_err_probe(dev, PTR_ERR(jdi->reset_gpio),
+ 				     "cannot get reset-gpios %d\n", ret);
+ 
+ 	jdi->dcdc_en_gpio = devm_gpiod_get(dev, "dcdc-en", GPIOD_OUT_LOW);
+ 	if (IS_ERR(jdi->dcdc_en_gpio))
+-		return dev_err_probe(dev, PTR_ERR(jdi->dcdc_en_gpio),
++		dev_err_probe(dev, PTR_ERR(jdi->dcdc_en_gpio),
  				     "cannot get dcdc-en-gpio %d\n", ret);
  
 -	jdi->backlight = drm_panel_create_dsi_backlight(jdi->dsi);
@@ -299,16 +347,19 @@ index 8f4f137a2af6..edf6bd4a6611 100644
  	if (IS_ERR(jdi->backlight))
  		return dev_err_probe(dev, PTR_ERR(jdi->backlight),
  				     "failed to register backlight %d\n", ret);
-@@ -458,8 +373,7 @@ static int jdi_panel_probe(struct mipi_dsi_device *dsi)
+@@ -450,8 +374,13 @@ static int jdi_panel_probe(struct mipi_dsi_device *dsi)
  
  	dsi->lanes = 4;
  	dsi->format = MIPI_DSI_FMT_RGB888;
 -	dsi->mode_flags =  MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO |
 -			   MIPI_DSI_CLOCK_NON_CONTINUOUS;
-+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST | MIPI_DSI_MODE_VIDEO_HSE;
++	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_HSE;
++
++	// on a311d it works only without burst, but imx8mplus needs burst mode
++	if (of_property_present(dsi->dev.of_node, "burst-mode")) {
++		dsi->mode_flags |= MIPI_DSI_MODE_VIDEO_BURST;
++		dev_warn(&dsi->dev, "DSI burst mode enabled via device tree\n");
++	}
  
  	jdi = devm_kzalloc(&dsi->dev, sizeof(*jdi), GFP_KERNEL);
  	if (!jdi)
--- 
-2.40.0
-
